" Increase the edit history of
set history=500

" Enable plugins based on filetype
filetype plugin on
filetype indent on

" Reload files when changed outside
set autoread

" Use , as leader
let mapleader=","
let g:mapleader=","

" Save with sudo using :W
command W w !sudo tee % > /dev/null

" Get some margin for the current line cursor
set scrolloff=7

" Show current position in file
set ruler

" Allow backspace to work over e.g. autoindents
set backspace=eol,start,indent

" Ignore casing when searching
set ignorecase
set smartcase " ...unless the pattern contains something uppercase

" Highlight search results
set hlsearch

" Show search results while typing them 
set incsearch
            
" Do not redraw screen while executing macros
set lazyredraw

" Show matching brackets when the cursor is over one
set showmatch

" Do not use bells on errors
set noerrorbells
set novisualbell

" Enable syntax highlighting
syntax enable

" Use colors that look good on dark backgrounds
set background=dark

" Use utf8 as standard encoding
set encoding=utf8

" Use unix line endings by default
set fileformats=unix,dos,mac

" Disable backups and swaps
set nobackup
set noswapfile
set nowritebackup

" Use spaces instead of tabs
set expandtab

" Will make backspace and tab use shiftwidth spaces instead
set smarttab

" Make tabs be 4 spaces
set shiftwidth=4
set tabstop=4

" Indentation
set autoindent " Use indentation from last line
set smartindent " Automatically add indentation after e.g. {
set cindent " Use C-indendation

" Namespaces and visibility labels should not increase indentation
set cino=N-sg0

" Use Ctrl+L to clear highlighting
map <C-l> :noh<cr>

" Tab handling
" ,te for open new tab
map <leader>te :tabedit<cr>
" ,tx for close tab
map <leader>tx :tabclose<cr>
" ,tn for next tab
map <leader>tn :tabnext<cr>
" ,tp for last tab
map <leader>tp :tabprevious<cr>

" Return to last edit position when opening files
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

" Add line numbers
set number

" Helper functions
" Return true if we are in pastemode
function! HasPaste()
    if &paste
        return 'PASTE MODE  '
    endif
    return ''
endfunction

" Custom status line
set statusline=\ %{HasPaste()}%F%m%r%h\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:\ %l\ \ Column:\ %c
set laststatus=2 " Always show status line

" Use ,pp to toggle paste mode
map <leader>pp :setlocal paste!<cr>

" Highlight current line with a cursor line
set cursorline

" Persistent undos
try
    set undodir=~/.vim_runtime/temp_dirs/undodir
    set undofile
catch
endtry

" Complement command mode with Ctrl+A for start, Ctrl+E for end
cnoremap <C-A> <Home>
cnoremap <C-E> <End>
